// Copyright 2018-2019 Red Hat, Inc.
// Copyright (c) 2018-2019 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This contains the core Network Service Mesh API definitions for external
// consumption via gRPC protobufs.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: connectioncontext.proto

package networkservice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpFamily_Family int32

const (
	IpFamily_IPV4 IpFamily_Family = 0
	IpFamily_IPV6 IpFamily_Family = 1
)

// Enum value maps for IpFamily_Family.
var (
	IpFamily_Family_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IpFamily_Family_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IpFamily_Family) Enum() *IpFamily_Family {
	p := new(IpFamily_Family)
	*p = x
	return p
}

func (x IpFamily_Family) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpFamily_Family) Descriptor() protoreflect.EnumDescriptor {
	return file_connectioncontext_proto_enumTypes[0].Descriptor()
}

func (IpFamily_Family) Type() protoreflect.EnumType {
	return &file_connectioncontext_proto_enumTypes[0]
}

func (x IpFamily_Family) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpFamily_Family.Descriptor instead.
func (IpFamily_Family) EnumDescriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{2, 0}
}

type IpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	HardwareAddress string `protobuf:"bytes,2,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty"`
}

func (x *IpNeighbor) Reset() {
	*x = IpNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpNeighbor) ProtoMessage() {}

func (x *IpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpNeighbor.ProtoReflect.Descriptor instead.
func (*IpNeighbor) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{0}
}

func (x *IpNeighbor) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpNeighbor) GetHardwareAddress() string {
	if x != nil {
		return x.HardwareAddress
	}
	return ""
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix  string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"` // destination address + prefix in format <address>/<prefix>
	NextHop string `protobuf:"bytes,2,opt,name=nextHop,proto3" json:"nextHop,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{1}
}

func (x *Route) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Route) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

type IpFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family IpFamily_Family `protobuf:"varint,1,opt,name=family,proto3,enum=connectioncontext.IpFamily_Family" json:"family,omitempty"`
}

func (x *IpFamily) Reset() {
	*x = IpFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpFamily) ProtoMessage() {}

func (x *IpFamily) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpFamily.ProtoReflect.Descriptor instead.
func (*IpFamily) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{2}
}

func (x *IpFamily) GetFamily() IpFamily_Family {
	if x != nil {
		return x.Family
	}
	return IpFamily_IPV4
}

type ExtraPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrFamily      *IpFamily `protobuf:"bytes,1,opt,name=addr_family,json=addrFamily,proto3" json:"addr_family,omitempty"`
	PrefixLen       uint32    `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	RequiredNumber  uint32    `protobuf:"varint,3,opt,name=required_number,json=requiredNumber,proto3" json:"required_number,omitempty"`
	RequestedNumber uint32    `protobuf:"varint,4,opt,name=requested_number,json=requestedNumber,proto3" json:"requested_number,omitempty"`
}

func (x *ExtraPrefixRequest) Reset() {
	*x = ExtraPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraPrefixRequest) ProtoMessage() {}

func (x *ExtraPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraPrefixRequest.ProtoReflect.Descriptor instead.
func (*ExtraPrefixRequest) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{3}
}

func (x *ExtraPrefixRequest) GetAddrFamily() *IpFamily {
	if x != nil {
		return x.AddrFamily
	}
	return nil
}

func (x *ExtraPrefixRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *ExtraPrefixRequest) GetRequiredNumber() uint32 {
	if x != nil {
		return x.RequiredNumber
	}
	return 0
}

func (x *ExtraPrefixRequest) GetRequestedNumber() uint32 {
	if x != nil {
		return x.RequestedNumber
	}
	return 0
}

type IPContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIpAddrs         []string              `protobuf:"bytes,1,rep,name=src_ip_addrs,json=srcIpAddrs,proto3" json:"src_ip_addrs,omitempty"`                         // source ip address + prefix in format <address>/<prefix>
	DstIpAddrs         []string              `protobuf:"bytes,2,rep,name=dst_ip_addrs,json=dstIpAddrs,proto3" json:"dst_ip_addrs,omitempty"`                         // destination ip address + prefix in format <address>/<prefix>
	SrcIpRequired      bool                  `protobuf:"varint,3,opt,name=src_ip_required,json=srcIpRequired,proto3" json:"src_ip_required,omitempty"`               // if specified src_ip is required from NSE.
	DstIpRequired      bool                  `protobuf:"varint,4,opt,name=dst_ip_required,json=dstIpRequired,proto3" json:"dst_ip_required,omitempty"`               // if specified dst_ip is required from NSE
	SrcRoutes          []*Route              `protobuf:"bytes,5,rep,name=src_routes,json=srcRoutes,proto3" json:"src_routes,omitempty"`                              // a list of routes via src_ip_addr as gateway
	DstRoutes          []*Route              `protobuf:"bytes,6,rep,name=dst_routes,json=dstRoutes,proto3" json:"dst_routes,omitempty"`                              // a list of routes via dst_ip_addr as gateway
	ExcludedPrefixes   []string              `protobuf:"bytes,7,rep,name=excluded_prefixes,json=excludedPrefixes,proto3" json:"excluded_prefixes,omitempty"`         // a list of excluded passed to NSE
	IpNeighbors        []*IpNeighbor         `protobuf:"bytes,8,rep,name=ip_neighbors,json=ipNeighbors,proto3" json:"ip_neighbors,omitempty"`                        // A lists of ARP table neighbours addresses
	ExtraPrefixRequest []*ExtraPrefixRequest `protobuf:"bytes,9,rep,name=extra_prefix_request,json=extraPrefixRequest,proto3" json:"extra_prefix_request,omitempty"` // A request for NSE to provide extra prefixes
	ExtraPrefixes      []string              `protobuf:"bytes,10,rep,name=extra_prefixes,json=extraPrefixes,proto3" json:"extra_prefixes,omitempty"`                 // A list of extra prefixes requested
}

func (x *IPContext) Reset() {
	*x = IPContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPContext) ProtoMessage() {}

func (x *IPContext) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPContext.ProtoReflect.Descriptor instead.
func (*IPContext) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{4}
}

func (x *IPContext) GetSrcIpAddrs() []string {
	if x != nil {
		return x.SrcIpAddrs
	}
	return nil
}

func (x *IPContext) GetDstIpAddrs() []string {
	if x != nil {
		return x.DstIpAddrs
	}
	return nil
}

func (x *IPContext) GetSrcIpRequired() bool {
	if x != nil {
		return x.SrcIpRequired
	}
	return false
}

func (x *IPContext) GetDstIpRequired() bool {
	if x != nil {
		return x.DstIpRequired
	}
	return false
}

func (x *IPContext) GetSrcRoutes() []*Route {
	if x != nil {
		return x.SrcRoutes
	}
	return nil
}

func (x *IPContext) GetDstRoutes() []*Route {
	if x != nil {
		return x.DstRoutes
	}
	return nil
}

func (x *IPContext) GetExcludedPrefixes() []string {
	if x != nil {
		return x.ExcludedPrefixes
	}
	return nil
}

func (x *IPContext) GetIpNeighbors() []*IpNeighbor {
	if x != nil {
		return x.IpNeighbors
	}
	return nil
}

func (x *IPContext) GetExtraPrefixRequest() []*ExtraPrefixRequest {
	if x != nil {
		return x.ExtraPrefixRequest
	}
	return nil
}

func (x *IPContext) GetExtraPrefixes() []string {
	if x != nil {
		return x.ExtraPrefixes
	}
	return nil
}

type DNSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ips of DNS Servers for this DNSConfig.  Any given IP may be IPv4 or IPv6
	DnsServerIps []string `protobuf:"bytes,1,rep,name=dns_server_ips,json=dnsServerIps,proto3" json:"dns_server_ips,omitempty"`
	// domains for which this DNSConfig provides resolution.  If empty, all domains.
	SearchDomains []string `protobuf:"bytes,2,rep,name=search_domains,json=searchDomains,proto3" json:"search_domains,omitempty"`
}

func (x *DNSConfig) Reset() {
	*x = DNSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSConfig) ProtoMessage() {}

func (x *DNSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSConfig.ProtoReflect.Descriptor instead.
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{5}
}

func (x *DNSConfig) GetDnsServerIps() []string {
	if x != nil {
		return x.DnsServerIps
	}
	return nil
}

func (x *DNSConfig) GetSearchDomains() []string {
	if x != nil {
		return x.SearchDomains
	}
	return nil
}

type DNSContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*DNSConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *DNSContext) Reset() {
	*x = DNSContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSContext) ProtoMessage() {}

func (x *DNSContext) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSContext.ProtoReflect.Descriptor instead.
func (*DNSContext) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{6}
}

func (x *DNSContext) GetConfigs() []*DNSConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type EthernetContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcMac  string `protobuf:"bytes,1,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty"`
	DstMac  string `protobuf:"bytes,2,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty"`
	VlanTag int32  `protobuf:"varint,3,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty"`
}

func (x *EthernetContext) Reset() {
	*x = EthernetContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetContext) ProtoMessage() {}

func (x *EthernetContext) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetContext.ProtoReflect.Descriptor instead.
func (*EthernetContext) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{7}
}

func (x *EthernetContext) GetSrcMac() string {
	if x != nil {
		return x.SrcMac
	}
	return ""
}

func (x *EthernetContext) GetDstMac() string {
	if x != nil {
		return x.DstMac
	}
	return ""
}

func (x *EthernetContext) GetVlanTag() int32 {
	if x != nil {
		return x.VlanTag
	}
	return 0
}

type ConnectionContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpContext       *IPContext        `protobuf:"bytes,1,opt,name=ip_context,json=ipContext,proto3" json:"ip_context,omitempty"`    // IP related context
	DnsContext      *DNSContext       `protobuf:"bytes,2,opt,name=dns_context,json=dnsContext,proto3" json:"dns_context,omitempty"` // DNS related context
	EthernetContext *EthernetContext  `protobuf:"bytes,3,opt,name=ethernet_context,json=ethernetContext,proto3" json:"ethernet_context,omitempty"`
	ExtraContext    map[string]string `protobuf:"bytes,4,rep,name=extra_context,json=extraContext,proto3" json:"extra_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // a k,v map for transfering arbitrary information from an NSE to an NSC or dataplane
	MTU             uint32            `protobuf:"varint,5,opt,name=MTU,proto3" json:"MTU,omitempty"`
}

func (x *ConnectionContext) Reset() {
	*x = ConnectionContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connectioncontext_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionContext) ProtoMessage() {}

func (x *ConnectionContext) ProtoReflect() protoreflect.Message {
	mi := &file_connectioncontext_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionContext.ProtoReflect.Descriptor instead.
func (*ConnectionContext) Descriptor() ([]byte, []int) {
	return file_connectioncontext_proto_rawDescGZIP(), []int{8}
}

func (x *ConnectionContext) GetIpContext() *IPContext {
	if x != nil {
		return x.IpContext
	}
	return nil
}

func (x *ConnectionContext) GetDnsContext() *DNSContext {
	if x != nil {
		return x.DnsContext
	}
	return nil
}

func (x *ConnectionContext) GetEthernetContext() *EthernetContext {
	if x != nil {
		return x.EthernetContext
	}
	return nil
}

func (x *ConnectionContext) GetExtraContext() map[string]string {
	if x != nil {
		return x.ExtraContext
	}
	return nil
}

func (x *ConnectionContext) GetMTU() uint32 {
	if x != nil {
		return x.MTU
	}
	return 0
}

var File_connectioncontext_proto protoreflect.FileDescriptor

var file_connectioncontext_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x47, 0x0a, 0x0a,
	0x49, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x39, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x22, 0x64, 0x0a, 0x08, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x80,
	0x04, 0x0a, 0x09, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x49, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x09,
	0x73, 0x72, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x09, 0x64, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x49, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x0b, 0x69, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0x57, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x22, 0x58, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0a, 0x44,
	0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44,
	0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x67, 0x22, 0x8f, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x49, 0x50, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x09, 0x69, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x44, 0x4e,
	0x53, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x54, 0x55, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d,
	0x54, 0x55, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connectioncontext_proto_rawDescOnce sync.Once
	file_connectioncontext_proto_rawDescData = file_connectioncontext_proto_rawDesc
)

func file_connectioncontext_proto_rawDescGZIP() []byte {
	file_connectioncontext_proto_rawDescOnce.Do(func() {
		file_connectioncontext_proto_rawDescData = protoimpl.X.CompressGZIP(file_connectioncontext_proto_rawDescData)
	})
	return file_connectioncontext_proto_rawDescData
}

var file_connectioncontext_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_connectioncontext_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_connectioncontext_proto_goTypes = []interface{}{
	(IpFamily_Family)(0),       // 0: connectioncontext.IpFamily.Family
	(*IpNeighbor)(nil),         // 1: connectioncontext.IpNeighbor
	(*Route)(nil),              // 2: connectioncontext.Route
	(*IpFamily)(nil),           // 3: connectioncontext.IpFamily
	(*ExtraPrefixRequest)(nil), // 4: connectioncontext.ExtraPrefixRequest
	(*IPContext)(nil),          // 5: connectioncontext.IPContext
	(*DNSConfig)(nil),          // 6: connectioncontext.DNSConfig
	(*DNSContext)(nil),         // 7: connectioncontext.DNSContext
	(*EthernetContext)(nil),    // 8: connectioncontext.EthernetContext
	(*ConnectionContext)(nil),  // 9: connectioncontext.ConnectionContext
	nil,                        // 10: connectioncontext.ConnectionContext.ExtraContextEntry
}
var file_connectioncontext_proto_depIdxs = []int32{
	0,  // 0: connectioncontext.IpFamily.family:type_name -> connectioncontext.IpFamily.Family
	3,  // 1: connectioncontext.ExtraPrefixRequest.addr_family:type_name -> connectioncontext.IpFamily
	2,  // 2: connectioncontext.IPContext.src_routes:type_name -> connectioncontext.Route
	2,  // 3: connectioncontext.IPContext.dst_routes:type_name -> connectioncontext.Route
	1,  // 4: connectioncontext.IPContext.ip_neighbors:type_name -> connectioncontext.IpNeighbor
	4,  // 5: connectioncontext.IPContext.extra_prefix_request:type_name -> connectioncontext.ExtraPrefixRequest
	6,  // 6: connectioncontext.DNSContext.configs:type_name -> connectioncontext.DNSConfig
	5,  // 7: connectioncontext.ConnectionContext.ip_context:type_name -> connectioncontext.IPContext
	7,  // 8: connectioncontext.ConnectionContext.dns_context:type_name -> connectioncontext.DNSContext
	8,  // 9: connectioncontext.ConnectionContext.ethernet_context:type_name -> connectioncontext.EthernetContext
	10, // 10: connectioncontext.ConnectionContext.extra_context:type_name -> connectioncontext.ConnectionContext.ExtraContextEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_connectioncontext_proto_init() }
func file_connectioncontext_proto_init() {
	if File_connectioncontext_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connectioncontext_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connectioncontext_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connectioncontext_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connectioncontext_proto_goTypes,
		DependencyIndexes: file_connectioncontext_proto_depIdxs,
		EnumInfos:         file_connectioncontext_proto_enumTypes,
		MessageInfos:      file_connectioncontext_proto_msgTypes,
	}.Build()
	File_connectioncontext_proto = out.File
	file_connectioncontext_proto_rawDesc = nil
	file_connectioncontext_proto_goTypes = nil
	file_connectioncontext_proto_depIdxs = nil
}
