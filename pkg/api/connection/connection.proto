// Copyright 2018 Red Hat, Inc.
// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This contains the core Network Service Mesh API definitions for external
// consumption via gRPC protobufs.

syntax = "proto3";

package connection;
option go_package = "github.com/networkservicemesh/api/pkg/api/connection";

import "ptypes/timestamp/timestamp.proto";
import "connectioncontext.proto";

message Mechanism {
  string cls = 1;
  string type = 2;
  map<string, string> parameters = 3;
}

enum State {
  UP = 0;
  DOWN = 1;
}

message PathSegment {
  string name      = 1;
  string id        = 2;
  string token = 3;
  google.protobuf.Timestamp expires = 4;
}
message Path {
  uint32 index = 1;
  repeated PathSegment path_segments = 2;
}

message Connection {
  string id = 1;
  string network_service = 2;
  Mechanism mechanism = 3;
  connectioncontext.ConnectionContext context = 4;
  map<string, string> labels = 5;
  Path path = 6;
  string network_service_endpoint_name = 7;
  State state = 9;
}

enum ConnectionEventType {
  INITIAL_STATE_TRANSFER = 0;
  UPDATE = 1;
  DELETE = 2;
}

message ConnectionEvent {
  ConnectionEventType type = 1;
  map<string, Connection> connections = 2;
}

message MonitorScopeSelector {
  repeated PathSegment path_segments = 1;
}

service MonitorConnection {
  rpc MonitorConnections(MonitorScopeSelector) returns (stream ConnectionEvent);
}
